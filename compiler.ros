#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp(ql:quickload '() :silent t)
  )

(defpackage :ros.script.compiler.3748945022
  (:use :cl))
(in-package :ros.script.compiler.3748945022)

(defun noop ())

(defun tokenize (code)
  (let ((tok "") (lst ()))
    (loop
      :for c :across code
      :do (cond
            ((string= " " c) (noop))
            ((or (string= "+" c) (string= "-" c))
             (setq lst (cons tok lst))
             (setq lst (cons c lst))
             (setq tok ""))
            (t (setq tok (format nil "~a~a" tok c)))))
    (if (> (length tok) 0)
      (setq lst (cons tok lst)))
    (reverse lst)))

(defun main (&rest argv)
  (if (not (eq (length argv) 1))
    (format t "Usage: ros compiler.ros <code>~%")
    (progn
      (format t ".intel_syntax noprefix~%")
      (format t ".global main~%")
      (format t "main:~%")
      ;;(format t "  mov rax, ~a~%" (tokenize (car argv)))

      (let ((tokens (tokenize (car argv))))
        (format t "  mov rax, ~a~%" (car tokens))
        (setq tokens (cdr tokens))
        (loop
          :for tok :in tokens
          :do (cond
                ((string= "+" tok) (format t "  add rax, "))
                ((string= "-" tok) (format t "  sub rax, "))
                (t (format t "~a~%" tok)))))
      (format t "  ret~%"))))

;;; vim: set ft=lisp lisp:
