#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp(ql:quickload '() :silent t)
  )

(defpackage :ros.script.compiler.3748945022
  (:use :cl))
(in-package :ros.script.compiler.3748945022)



;(defun tokenize (chars)
;  (flet ((make-token (acc-ch acc-token chs)
;	   (case (car chs)
;	     (#\space
;  (concatenate 'string chars))

;;(defun read-file (stream)
;;  ;;  (let (code buf tokenp stringp)
;;  (let (code)
;;    (loop
;;      :for ch = (read-char stream nil :eof)
;;      :until (eq ch :eof)
;;      :do (push ch code)
;;      :finally (return (nreverse code)))))

(defun main (&rest argv)
  (declare (ignorable argv))
	(if (not (eq (length argv) 1))
		(format t "Usage: ros compiler.ros <code>~%")
		(progn
			(format t ".intel_syntax noprefix~%")
			(format t ".global main~%")
			(format t "main:~%")
			(format t "  mov rax, ~a~%" (car argv))
			(format t "  ret~%"))))

;;  (loop
;;    :for file :in argv
;;    :do (let ((stream (open file :if-does-not-exist nil)))
;;          ;;    (format t "~a~%" (tokenize (read-file in)))))
;;          (format t "~a~%" (read-file stream)))))


;;  (let* ((file (string (car argv)))
;;	(in (open file :if-does-not-exist nil)))
;;    ;;    (format t "~a~%" (tokenize (read-file in)))))
;;    (format t "~a~%" (read-file in))))


;;; vim: set ft=lisp lisp:
